diff --git a/cmake/modules/ConfigureChecks.cmake b/cmake/modules/ConfigureChecks.cmake
index 85b0be8b39..4caccfbc5f 100644
--- a/cmake/modules/ConfigureChecks.cmake
+++ b/cmake/modules/ConfigureChecks.cmake
@@ -130,7 +130,7 @@ check_function_exists (llabs            HAVE_LLABS)
 check_function_exists (pclose           HAVE_PCLOSE)
 check_function_exists (popen            HAVE_POPEN)
 check_function_exists (qsort_r          HAVE_QSORT_R)
-if (HAVE_QSORT_R)
+if (HAVE_QSORT_R AND NOT CMAKE_CROSSCOMPILING)
 	# check qsort_r compatibility
 	check_c_source_runs (
 		"
@@ -151,7 +151,7 @@ if (HAVE_QSORT_R)
 		}
 		"
 		HAVE_QSORT_R_GLIBC)
-endif (HAVE_QSORT_R)
+endif (HAVE_QSORT_R AND NOT CMAKE_CROSSCOMPILING)
 check_function_exists (strcasecmp       HAVE_STRCASECMP)
 check_function_exists (strncasecmp      HAVE_STRNCASECMP)
 check_function_exists (stricmp          HAVE_STRICMP)
@@ -297,28 +297,30 @@ set (HAVE_SYS_TYPES_H_ "${HAVE_SYS_TYPES_H}"
 
 test_big_endian (WORDS_BIGENDIAN)
 
-# Byte swapping functions
-check_c_source_runs (
-	"
-	int main(void) {
-		return !__builtin_bswap16(0xabcd) == 0xcdab;
-	}
-	"
-	HAVE___BUILTIN_BSWAP16)
-check_c_source_runs (
-	"
-	int main(void) {
-		return !__builtin_bswap32(0xdeadbeef) == 0xefbeadde;
-	}
-	"
-	HAVE___BUILTIN_BSWAP32)
-check_c_source_runs (
-	"
-	int main(void) {
-		return !__builtin_bswap64(0x1234567890abcdef) == 0xefcdab9078563412;
-	}
-	"
-	HAVE___BUILTIN_BSWAP64)
+if (NOT CMAKE_CROSSCOMPILING)
+	# Byte swapping functions
+	check_c_source_runs (
+		"
+		int main(void) {
+			return !__builtin_bswap16(0xabcd) == 0xcdab;
+		}
+		"
+		HAVE___BUILTIN_BSWAP16)
+	check_c_source_runs (
+		"
+		int main(void) {
+			return !__builtin_bswap32(0xdeadbeef) == 0xefbeadde;
+		}
+		"
+		HAVE___BUILTIN_BSWAP32)
+	check_c_source_runs (
+		"
+		int main(void) {
+			return !__builtin_bswap64(0x1234567890abcdef) == 0xefcdab9078563412;
+		}
+		"
+		HAVE___BUILTIN_BSWAP64)
+endif (NOT CMAKE_CROSSCOMPILING)
 if (WIN32)
 	check_function_exists (_byteswap_ushort HAVE__BYTESWAP_USHORT) # for uint16_t
 	check_function_exists (_byteswap_ulong  HAVE__BYTESWAP_ULONG)  # for uint32_t
diff --git a/cmake/modules/FindDCW.cmake b/cmake/modules/FindDCW.cmake
index 25d2720ca5..eef0c2b7c6 100644
--- a/cmake/modules/FindDCW.cmake
+++ b/cmake/modules/FindDCW.cmake
@@ -38,31 +38,35 @@ endif (DCW_PATH)
 
 # check dcw version via running gshhg_version
 if (_DCW_FILE AND NOT DCW_FOUND)
-	try_run (_EXIT_GSHHG_VERSION _COMPILED_GSHHG_VERSION
-		${CMAKE_BINARY_DIR}/CMakeTmp
-		${CMAKE_CURRENT_SOURCE_DIR}/gshhg_version.c
-		CMAKE_FLAGS
-		-DINCLUDE_DIRECTORIES=${NETCDF_INCLUDE_DIR}
-		-DLINK_LIBRARIES=${NETCDF_LIBRARIES}
-		COMPILE_DEFINITIONS -DSTANDALONE
-		COMPILE_OUTPUT_VARIABLE _GSHHG_VERSION_COMPILE_OUT
-		RUN_OUTPUT_VARIABLE _DCW_VERSION_STRING
-		ARGS \"${_DCW_FILE}\")
+	if (NOT CMAKE_CROSSCOMPILING)
+		try_run (_EXIT_GSHHG_VERSION _COMPILED_GSHHG_VERSION
+			${CMAKE_BINARY_DIR}/CMakeTmp
+			${CMAKE_CURRENT_SOURCE_DIR}/gshhg_version.c
+			CMAKE_FLAGS
+			-DINCLUDE_DIRECTORIES=${NETCDF_INCLUDE_DIR}
+			-DLINK_LIBRARIES=${NETCDF_LIBRARIES}
+			COMPILE_DEFINITIONS -DSTANDALONE
+			COMPILE_OUTPUT_VARIABLE _GSHHG_VERSION_COMPILE_OUT
+			RUN_OUTPUT_VARIABLE _DCW_VERSION_STRING
+			ARGS \"${_DCW_FILE}\")
 
-	if (NOT _COMPILED_GSHHG_VERSION OR _EXIT_GSHHG_VERSION STREQUAL FAILED_TO_RUN)
-		message(FATAL_ERROR "Cannot determine DCW version:\n
-		${_GSHHG_VERSION_COMPILE_OUT}\n
-		${_DCW_VERSION_STRING}")
-	endif ()
+		if (NOT _COMPILED_GSHHG_VERSION OR _EXIT_GSHHG_VERSION STREQUAL FAILED_TO_RUN)
+			message(FATAL_ERROR "Cannot determine DCW version:\n
+			${_GSHHG_VERSION_COMPILE_OUT}\n
+			${_DCW_VERSION_STRING}")
+		endif ()
 
-	# check version string
-	if (_COMPILED_GSHHG_VERSION)
-		# strip whitespace
-		string (STRIP ${_DCW_VERSION_STRING} DCW_VERSION)
-		if (_EXIT_GSHHG_VERSION EQUAL 0)
-			set (DCW_VERSION ${DCW_VERSION} CACHE INTERNAL "DCW version")
-		endif (_EXIT_GSHHG_VERSION EQUAL 0)
-	endif (_COMPILED_GSHHG_VERSION)
+		# check version string
+		if (_COMPILED_GSHHG_VERSION)
+			# strip whitespace
+			string (STRIP ${_DCW_VERSION_STRING} DCW_VERSION)
+			if (_EXIT_GSHHG_VERSION EQUAL 0)
+				set (DCW_VERSION ${DCW_VERSION} CACHE INTERNAL "DCW version")
+			endif (_EXIT_GSHHG_VERSION EQUAL 0)
+		endif (_COMPILED_GSHHG_VERSION)
+	else (NOT CMAKE_CROSSCOMPILING)
+		set (DCW_VERSION "Unknown" CACHE INTERNAL "DCW version")
+	endif (NOT CMAKE_CROSSCOMPILING)
 endif (_DCW_FILE AND NOT DCW_FOUND)
 
 include (FindPackageHandleStandardArgs)
diff --git a/cmake/modules/FindGSHHG.cmake b/cmake/modules/FindGSHHG.cmake
index d9b11f3d57..33bb47da62 100644
--- a/cmake/modules/FindGSHHG.cmake
+++ b/cmake/modules/FindGSHHG.cmake
@@ -54,36 +54,39 @@ set (GSHHG_MIN_REQUIRED_VERSION
 
 # check GSHHG version
 if (_GSHHG_FILE AND NOT GSHHG_FOUND)
-	try_run (_EXIT_GSHHG_VERSION _COMPILED_GSHHG_VERSION
-		${CMAKE_BINARY_DIR}/CMakeTmp
-		${CMAKE_CURRENT_SOURCE_DIR}/gshhg_version.c
-		CMAKE_FLAGS
-		-DINCLUDE_DIRECTORIES=${NETCDF_INCLUDE_DIR}
-		-DLINK_LIBRARIES=${NETCDF_LIBRARIES}
-		COMPILE_DEFINITIONS -DSTANDALONE
-		COMPILE_OUTPUT_VARIABLE _GSHHG_VERSION_COMPILE_OUT
-		RUN_OUTPUT_VARIABLE _GSHHG_VERSION_STRING
-		ARGS \"${_GSHHG_FILE}\" ${GSHHG_MIN_REQUIRED_VERSION})
+	if (NOT CMAKE_CROSSCOMPILING)
+		try_run (_EXIT_GSHHG_VERSION _COMPILED_GSHHG_VERSION
+			${CMAKE_BINARY_DIR}/CMakeTmp
+			${CMAKE_CURRENT_SOURCE_DIR}/gshhg_version.c
+			CMAKE_FLAGS
+			-DINCLUDE_DIRECTORIES=${NETCDF_INCLUDE_DIR}
+			-DLINK_LIBRARIES=${NETCDF_LIBRARIES}
+			COMPILE_DEFINITIONS -DSTANDALONE
+			COMPILE_OUTPUT_VARIABLE _GSHHG_VERSION_COMPILE_OUT
+			RUN_OUTPUT_VARIABLE _GSHHG_VERSION_STRING
+			ARGS \"${_GSHHG_FILE}\" ${GSHHG_MIN_REQUIRED_VERSION})
 
-	if (NOT _COMPILED_GSHHG_VERSION OR _EXIT_GSHHG_VERSION STREQUAL FAILED_TO_RUN)
-		message(FATAL_ERROR "Cannot determine GSHHG version:\n
-		${_GSHHG_VERSION_COMPILE_OUT}\n
-		${_GSHHG_VERSION_STRING}")
-	endif ()
-
-	# check version string
-	if (_COMPILED_GSHHG_VERSION)
-		# strip whitespace
-		string (STRIP ${_GSHHG_VERSION_STRING} GSHHG_VERSION)
-		if (_EXIT_GSHHG_VERSION EQUAL 0)
-			# found GSHHG of required version or higher
-			set (GSHHG_VERSION ${GSHHG_VERSION} CACHE INTERNAL "GSHHG version")
-		elseif (_EXIT_GSHHG_VERSION EQUAL -1)
-			# found GSHHG but version is too old
-			message (WARNING "GSHHG found but it is too old (${GSHHG_VERSION}). "
-				"Need at least ${GSHHG_MIN_REQUIRED_VERSION}.")
-		endif (_EXIT_GSHHG_VERSION EQUAL 0)
-	endif (_COMPILED_GSHHG_VERSION)
+		if (NOT _COMPILED_GSHHG_VERSION OR _EXIT_GSHHG_VERSION STREQUAL FAILED_TO_RUN)
+			message(FATAL_ERROR "Cannot determine GSHHG version:\n
+			${_GSHHG_VERSION_COMPILE_OUT}\n
+			${_GSHHG_VERSION_STRING}")
+		endif ()
+		# check version string
+		if (_COMPILED_GSHHG_VERSION)
+			# strip whitespace
+			string (STRIP ${_GSHHG_VERSION_STRING} GSHHG_VERSION)
+			if (_EXIT_GSHHG_VERSION EQUAL 0)
+				# found GSHHG of required version or higher
+				set (GSHHG_VERSION ${GSHHG_VERSION} CACHE INTERNAL "GSHHG version")
+			elseif (_EXIT_GSHHG_VERSION EQUAL -1)
+				# found GSHHG but version is too old
+				message (WARNING "GSHHG found but it is too old (${GSHHG_VERSION}). "
+					"Need at least ${GSHHG_MIN_REQUIRED_VERSION}.")
+			endif (_EXIT_GSHHG_VERSION EQUAL 0)
+		endif (_COMPILED_GSHHG_VERSION)
+	else (NOT CMAKE_CROSSCOMPILING)
+		set (GSHHG_VERSION "Unknown" CACHE INTERNAL "GSHHG version")
+	endif (NOT CMAKE_CROSSCOMPILING)
 endif (_GSHHG_FILE AND NOT GSHHG_FOUND)
 
 include (FindPackageHandleStandardArgs)
